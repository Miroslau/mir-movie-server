# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ActorEntity {
  Birth: DateTime!
  Nationality: String!
  UpdateAt: DateTime!
  createdAt: DateTime!
  firstName: String!
  id: ID!
  movies: [MovieEntity!]
  secondName: String!
}

input AddGenreForMovieInput {
  genresId: [ID!]!
  movieId: ID!
}

input AddMovieForActorInput {
  actorId: ID!
  moviesId: [ID!]!
}

input AddMovieForDirectorInput {
  directorId: ID!
  movieId: ID!
}

input CreateActorInput {
  Birth: DateTime!
  Nationality: String!
  firstName: String!
  secondName: String!
}

input CreateDirectorInput {
  Birth: DateTime!
  Nationality: String!
  firstName: String!
  secondName: String!
}

input CreateGenreInput {
  genreName: String!
}

input CreateMovieInput {
  movieLength: Float!
  plot: String!
  rating: Float!
  release: DateTime!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DirectorEntity {
  Birth: DateTime!
  Nationality: String!
  UpdateAt: DateTime!
  createdAt: DateTime!
  firstName: String!
  id: ID!
  movies: [MovieEntity!]
  secondName: String!
}

type GenreEntity {
  UpdateAt: DateTime!
  createdAt: DateTime!
  genreName: String!
  id: ID!
  movies: [MovieEntity!]
}

type MovieEntity {
  UpdateAt: DateTime!
  actors: [ActorEntity!]
  createdAt: DateTime!
  directors: [DirectorEntity!]
  genres: [GenreEntity!]
  id: ID!
  movieLength: Float!
  plot: String!
  rating: Float!
  release: DateTime!
  title: String!
}

type Mutation {
  addGenreForMovie(addGenreForMovie: AddGenreForMovieInput!): MovieEntity!
  addMovieForActor(addMovieForActorInput: AddMovieForActorInput!): ActorEntity!
  addMovieForDirector(addMovieForDirectorInput: AddMovieForDirectorInput!): DirectorEntity!
  createActor(createActor: CreateActorInput!): ActorEntity!
  createDirector(createDirector: CreateDirectorInput!): DirectorEntity!
  createGenre(createGenre: CreateGenreInput!): GenreEntity!
  createMovie(createMovie: CreateMovieInput!): MovieEntity!
  removeActor(id: Float!): Float!
  removeGenre(id: Float!): Float!
  updateGenre(updateGenre: UpdateGenreInput!): GenreEntity!
}

type Query {
  getActorById(id: Float!): ActorEntity!
  getAllActors: [ActorEntity!]!
  getAllDirectors: [DirectorEntity!]!
  getAllGenres: [GenreEntity!]!
  getAllMovies: [MovieEntity!]!
  getDirectorById(id: Float!): DirectorEntity!
  getGenreById(id: Float!): GenreEntity!
  getMovieById(id: Float!): MovieEntity!
}

input UpdateGenreInput {
  genreName: String
  id: ID!
}